version: '3'

services:
  db:
    image: postgres:latest
    container_name: postgres_container
    restart: unless-stopped
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - backend

  web:
    build: .
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USERNAME}:${DB_PASSWORD}@db:${DB_PORT}/${DB_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      FRONTEND_URL: ${FRONTEND_URL}
    restart: unless-stopped
    container_name: web_container
    ports:
      - "${PORT}:3000"
    depends_on:
      - db
    command: > 
      sh -c "
        /wait-for-it.sh db:${DB_PORT} --timeout-30 --strict -- \ 
        npm sequelize db:migrate:undo:all && 
        npm sequelize db:migrate && 
        npm sequelize db:seed:all && 
        npm start
      "
    networks:
      - backend

  nginx:
    image: nginx:latest
    container_name: nginx_container
    restart: unless-stopped
    volumes:
      #- ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-app.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
